/*
 * Swagger HIP Facade - OpenAPI 3.0
 * This is a set of interfaces based on the OpenAPI 3.0 specification for a wrapper client
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nha.abdm.wrapper.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nha.abdm.wrapper.client.model.PatientDiscoveryRequestPatient;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.nha.abdm.wrapper.client.invoker.JSON;

/**
 * PatientDiscoveryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T00:27:32.411905600+05:30[Asia/Calcutta]")
public class PatientDiscoveryRequest {
  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private UUID transactionId;

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  private PatientDiscoveryRequestPatient patient;

  public static final String SERIALIZED_NAME_HIP_ID = "hipId";
  @SerializedName(SERIALIZED_NAME_HIP_ID)
  private String hipId;

  public PatientDiscoveryRequest() {
  }

  public PatientDiscoveryRequest requestId(UUID requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * a nonce, unique for each HTTP request.
   * @return requestId
  **/
  @javax.annotation.Nonnull
  public UUID getRequestId() {
    return requestId;
  }


  public void setRequestId(UUID requestId) {
    this.requestId = requestId;
  }


  public PatientDiscoveryRequest timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public PatientDiscoveryRequest transactionId(UUID transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * correlation-Id for patient discovery and subsequent care context linkage
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  public UUID getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(UUID transactionId) {
    this.transactionId = transactionId;
  }


  public PatientDiscoveryRequest patient(PatientDiscoveryRequestPatient patient) {
    
    this.patient = patient;
    return this;
  }

   /**
   * Get patient
   * @return patient
  **/
  @javax.annotation.Nonnull
  public PatientDiscoveryRequestPatient getPatient() {
    return patient;
  }


  public void setPatient(PatientDiscoveryRequestPatient patient) {
    this.patient = patient;
  }


  public PatientDiscoveryRequest hipId(String hipId) {
    
    this.hipId = hipId;
    return this;
  }

   /**
   * Get hipId
   * @return hipId
  **/
  @javax.annotation.Nullable
  public String getHipId() {
    return hipId;
  }


  public void setHipId(String hipId) {
    this.hipId = hipId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientDiscoveryRequest patientDiscoveryRequest = (PatientDiscoveryRequest) o;
    return Objects.equals(this.requestId, patientDiscoveryRequest.requestId) &&
        Objects.equals(this.timestamp, patientDiscoveryRequest.timestamp) &&
        Objects.equals(this.transactionId, patientDiscoveryRequest.transactionId) &&
        Objects.equals(this.patient, patientDiscoveryRequest.patient) &&
        Objects.equals(this.hipId, patientDiscoveryRequest.hipId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, timestamp, transactionId, patient, hipId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientDiscoveryRequest {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    hipId: ").append(toIndentedString(hipId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestId");
    openapiFields.add("timestamp");
    openapiFields.add("transactionId");
    openapiFields.add("patient");
    openapiFields.add("hipId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("patient");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatientDiscoveryRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PatientDiscoveryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientDiscoveryRequest is not found in the empty JSON string", PatientDiscoveryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatientDiscoveryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientDiscoveryRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientDiscoveryRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      // validate the required field `patient`
      PatientDiscoveryRequestPatient.validateJsonObject(jsonObj.getAsJsonObject("patient"));
      if ((jsonObj.get("hipId") != null && !jsonObj.get("hipId").isJsonNull()) && !jsonObj.get("hipId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientDiscoveryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientDiscoveryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientDiscoveryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientDiscoveryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientDiscoveryRequest>() {
           @Override
           public void write(JsonWriter out, PatientDiscoveryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientDiscoveryRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatientDiscoveryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatientDiscoveryRequest
  * @throws IOException if the JSON string is invalid with respect to PatientDiscoveryRequest
  */
  public static PatientDiscoveryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientDiscoveryRequest.class);
  }

 /**
  * Convert an instance of PatientDiscoveryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

