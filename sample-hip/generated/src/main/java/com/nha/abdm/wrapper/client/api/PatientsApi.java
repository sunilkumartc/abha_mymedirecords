/*
 * Swagger HIP Facade - OpenAPI 3.0
 * This is a set of interfaces based on the OpenAPI 3.0 specification for a wrapper client
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nha.abdm.wrapper.client.api;

import com.nha.abdm.wrapper.client.invoker.ApiCallback;
import com.nha.abdm.wrapper.client.invoker.ApiClient;
import com.nha.abdm.wrapper.client.invoker.ApiException;
import com.nha.abdm.wrapper.client.invoker.ApiResponse;
import com.nha.abdm.wrapper.client.invoker.Configuration;
import com.nha.abdm.wrapper.client.invoker.Pair;
import com.nha.abdm.wrapper.client.invoker.ProgressRequestBody;
import com.nha.abdm.wrapper.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.nha.abdm.wrapper.client.model.CareContextRequest;
import com.nha.abdm.wrapper.client.model.ErrorResponse;
import com.nha.abdm.wrapper.client.model.FacadeResponse;
import com.nha.abdm.wrapper.client.model.Patient;
import com.nha.abdm.wrapper.client.model.PatientDiscoveryRequest;
import com.nha.abdm.wrapper.client.model.ProfileAcknowledgement;
import com.nha.abdm.wrapper.client.model.ShareProfileRequest;
import com.nha.abdm.wrapper.client.model.SmsNotify;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PatientsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PatientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PatientsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for patientCareContextsPost
     * @param careContextRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientCareContextsPostCall(CareContextRequest careContextRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = careContextRequest;

        // create path and map variables
        String localVarPath = "/patient-care-contexts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientCareContextsPostValidateBeforeCall(CareContextRequest careContextRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'careContextRequest' is set
        if (careContextRequest == null) {
            throw new ApiException("Missing the required parameter 'careContextRequest' when calling patientCareContextsPost(Async)");
        }

        return patientCareContextsPostCall(careContextRequest, _callback);

    }

    /**
     * Gets Care Contexts of the given patient id
     * 
     * @param careContextRequest  (required)
     * @return Patient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public Patient patientCareContextsPost(CareContextRequest careContextRequest) throws ApiException {
        ApiResponse<Patient> localVarResp = patientCareContextsPostWithHttpInfo(careContextRequest);
        return localVarResp.getData();
    }

    /**
     * Gets Care Contexts of the given patient id
     * 
     * @param careContextRequest  (required)
     * @return ApiResponse&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Patient> patientCareContextsPostWithHttpInfo(CareContextRequest careContextRequest) throws ApiException {
        okhttp3.Call localVarCall = patientCareContextsPostValidateBeforeCall(careContextRequest, null);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets Care Contexts of the given patient id (asynchronously)
     * 
     * @param careContextRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientCareContextsPostAsync(CareContextRequest careContextRequest, final ApiCallback<Patient> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientCareContextsPostValidateBeforeCall(careContextRequest, _callback);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patientDiscoverPost
     * @param patientDiscoveryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Empty verified identifiers.   * Format mismatch of any of attributes.     | type   | Format/Allowed Values|     | ------- | ----------------    |     | gender  | M/F/O/U |     | MOBILE  | valid mobile number with proper country code |  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientDiscoverPostCall(PatientDiscoveryRequest patientDiscoveryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patientDiscoveryRequest;

        // create path and map variables
        String localVarPath = "/patient-discover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patientDiscoverPostValidateBeforeCall(PatientDiscoveryRequest patientDiscoveryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'patientDiscoveryRequest' is set
        if (patientDiscoveryRequest == null) {
            throw new ApiException("Missing the required parameter 'patientDiscoveryRequest' when calling patientDiscoverPost(Async)");
        }

        return patientDiscoverPostCall(patientDiscoveryRequest, _callback);

    }

    /**
     * Discover patient&#39;s accounts
     * Request for patient care context discover, made by CM for a specific HIP. It is expected that HIP will subsequently return either zero or one patient record with (potentially masked) associated care contexts   1. **At least one of the verified identifier matches**   2. **Name (fuzzy), gender matches**   3. **If YoB was given, age band(+-2) matches**   4. **If unverified identifiers were given, one of them matches**   5. **If more than one patient records would be found after aforementioned steps, then patient who matches most verified and unverified identifiers would be returned.**   6. **If there would be still more than one patients (after ranking) error would be returned**   7. **Intended HIP should be able to resolve and identify results returned in the subsequent link confirmation request via the specified transactionId**   8. **Intended HIP should store the discovery results with transactionId and care contexts discovered for subsequent link initiation** 
     * @param patientDiscoveryRequest  (required)
     * @return Patient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Empty verified identifiers.   * Format mismatch of any of attributes.     | type   | Format/Allowed Values|     | ------- | ----------------    |     | gender  | M/F/O/U |     | MOBILE  | valid mobile number with proper country code |  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public Patient patientDiscoverPost(PatientDiscoveryRequest patientDiscoveryRequest) throws ApiException {
        ApiResponse<Patient> localVarResp = patientDiscoverPostWithHttpInfo(patientDiscoveryRequest);
        return localVarResp.getData();
    }

    /**
     * Discover patient&#39;s accounts
     * Request for patient care context discover, made by CM for a specific HIP. It is expected that HIP will subsequently return either zero or one patient record with (potentially masked) associated care contexts   1. **At least one of the verified identifier matches**   2. **Name (fuzzy), gender matches**   3. **If YoB was given, age band(+-2) matches**   4. **If unverified identifiers were given, one of them matches**   5. **If more than one patient records would be found after aforementioned steps, then patient who matches most verified and unverified identifiers would be returned.**   6. **If there would be still more than one patients (after ranking) error would be returned**   7. **Intended HIP should be able to resolve and identify results returned in the subsequent link confirmation request via the specified transactionId**   8. **Intended HIP should store the discovery results with transactionId and care contexts discovered for subsequent link initiation** 
     * @param patientDiscoveryRequest  (required)
     * @return ApiResponse&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Empty verified identifiers.   * Format mismatch of any of attributes.     | type   | Format/Allowed Values|     | ------- | ----------------    |     | gender  | M/F/O/U |     | MOBILE  | valid mobile number with proper country code |  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Patient> patientDiscoverPostWithHttpInfo(PatientDiscoveryRequest patientDiscoveryRequest) throws ApiException {
        okhttp3.Call localVarCall = patientDiscoverPostValidateBeforeCall(patientDiscoveryRequest, null);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discover patient&#39;s accounts (asynchronously)
     * Request for patient care context discover, made by CM for a specific HIP. It is expected that HIP will subsequently return either zero or one patient record with (potentially masked) associated care contexts   1. **At least one of the verified identifier matches**   2. **Name (fuzzy), gender matches**   3. **If YoB was given, age band(+-2) matches**   4. **If unverified identifiers were given, one of them matches**   5. **If more than one patient records would be found after aforementioned steps, then patient who matches most verified and unverified identifiers would be returned.**   6. **If there would be still more than one patients (after ranking) error would be returned**   7. **Intended HIP should be able to resolve and identify results returned in the subsequent link confirmation request via the specified transactionId**   8. **Intended HIP should store the discovery results with transactionId and care contexts discovered for subsequent link initiation** 
     * @param patientDiscoveryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Causes:**   * Empty verified identifiers.   * Format mismatch of any of attributes.     | type   | Format/Allowed Values|     | ------- | ----------------    |     | gender  | M/F/O/U |     | MOBILE  | valid mobile number with proper country code |  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Causes:**   * Unauthorized request  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Causes:**   * Downstream system(s) is down.   * Unhandled exceptions.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patientDiscoverPostAsync(PatientDiscoveryRequest patientDiscoveryRequest, final ApiCallback<Patient> _callback) throws ApiException {

        okhttp3.Call localVarCall = patientDiscoverPostValidateBeforeCall(patientDiscoveryRequest, _callback);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareProfilePost
     * @param shareProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareProfilePostCall(ShareProfileRequest shareProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareProfileRequest;

        // create path and map variables
        String localVarPath = "/share/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareProfilePostValidateBeforeCall(ShareProfileRequest shareProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shareProfileRequest' is set
        if (shareProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'shareProfileRequest' when calling shareProfilePost(Async)");
        }

        return shareProfilePostCall(shareProfileRequest, _callback);

    }

    /**
     * Sharing patient details with a facility via scan and share
     * 
     * @param shareProfileRequest  (required)
     * @return ProfileAcknowledgement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public ProfileAcknowledgement shareProfilePost(ShareProfileRequest shareProfileRequest) throws ApiException {
        ApiResponse<ProfileAcknowledgement> localVarResp = shareProfilePostWithHttpInfo(shareProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Sharing patient details with a facility via scan and share
     * 
     * @param shareProfileRequest  (required)
     * @return ApiResponse&lt;ProfileAcknowledgement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileAcknowledgement> shareProfilePostWithHttpInfo(ShareProfileRequest shareProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = shareProfilePostValidateBeforeCall(shareProfileRequest, null);
        Type localVarReturnType = new TypeToken<ProfileAcknowledgement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sharing patient details with a facility via scan and share (asynchronously)
     * 
     * @param shareProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareProfilePostAsync(ShareProfileRequest shareProfileRequest, final ApiCallback<ProfileAcknowledgement> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareProfilePostValidateBeforeCall(shareProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<ProfileAcknowledgement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smsNotifyPost
     * @param smsNotify  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsNotifyPostCall(SmsNotify smsNotify, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smsNotify;

        // create path and map variables
        String localVarPath = "/sms/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smsNotifyPostValidateBeforeCall(SmsNotify smsNotify, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsNotify' is set
        if (smsNotify == null) {
            throw new ApiException("Missing the required parameter 'smsNotify' when calling smsNotifyPost(Async)");
        }

        return smsNotifyPostCall(smsNotify, _callback);

    }

    /**
     * Sending sms to patient via ABDM
     * 
     * @param smsNotify  (required)
     * @return FacadeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public FacadeResponse smsNotifyPost(SmsNotify smsNotify) throws ApiException {
        ApiResponse<FacadeResponse> localVarResp = smsNotifyPostWithHttpInfo(smsNotify);
        return localVarResp.getData();
    }

    /**
     * Sending sms to patient via ABDM
     * 
     * @param smsNotify  (required)
     * @return ApiResponse&lt;FacadeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacadeResponse> smsNotifyPostWithHttpInfo(SmsNotify smsNotify) throws ApiException {
        okhttp3.Call localVarCall = smsNotifyPostValidateBeforeCall(smsNotify, null);
        Type localVarReturnType = new TypeToken<FacadeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sending sms to patient via ABDM (asynchronously)
     * 
     * @param smsNotify  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsNotifyPostAsync(SmsNotify smsNotify, final ApiCallback<FacadeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = smsNotifyPostValidateBeforeCall(smsNotify, _callback);
        Type localVarReturnType = new TypeToken<FacadeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertPatients
     * @param patient Insert or update a list of patients in the wrapper database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertPatientsCall(List<Patient> patient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patient;

        // create path and map variables
        String localVarPath = "/add-patients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertPatientsValidateBeforeCall(List<Patient> patient, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'patient' is set
        if (patient == null) {
            throw new ApiException("Missing the required parameter 'patient' when calling upsertPatients(Async)");
        }

        return upsertPatientsCall(patient, _callback);

    }

    /**
     * Insert or Update a list of patients
     * Insert or Update a list of patients
     * @param patient Insert or update a list of patients in the wrapper database (required)
     * @return FacadeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public FacadeResponse upsertPatients(List<Patient> patient) throws ApiException {
        ApiResponse<FacadeResponse> localVarResp = upsertPatientsWithHttpInfo(patient);
        return localVarResp.getData();
    }

    /**
     * Insert or Update a list of patients
     * Insert or Update a list of patients
     * @param patient Insert or update a list of patients in the wrapper database (required)
     * @return ApiResponse&lt;FacadeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacadeResponse> upsertPatientsWithHttpInfo(List<Patient> patient) throws ApiException {
        okhttp3.Call localVarCall = upsertPatientsValidateBeforeCall(patient, null);
        Type localVarReturnType = new TypeToken<FacadeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert or Update a list of patients (asynchronously)
     * Insert or Update a list of patients
     * @param patient Insert or update a list of patients in the wrapper database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation exception </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertPatientsAsync(List<Patient> patient, final ApiCallback<FacadeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertPatientsValidateBeforeCall(patient, _callback);
        Type localVarReturnType = new TypeToken<FacadeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
