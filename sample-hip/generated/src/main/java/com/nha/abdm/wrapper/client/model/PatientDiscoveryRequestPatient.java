/*
 * Swagger HIP Facade - OpenAPI 3.0
 * This is a set of interfaces based on the OpenAPI 3.0 specification for a wrapper client
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nha.abdm.wrapper.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nha.abdm.wrapper.client.model.Identifier;
import com.nha.abdm.wrapper.client.model.PatientGender;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.nha.abdm.wrapper.client.invoker.JSON;

/**
 * PatientDiscoveryRequestPatient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T00:27:32.411905600+05:30[Asia/Calcutta]")
public class PatientDiscoveryRequestPatient {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VERIFIED_IDENTIFIERS = "verifiedIdentifiers";
  @SerializedName(SERIALIZED_NAME_VERIFIED_IDENTIFIERS)
  private List<Identifier> verifiedIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNVERIFIED_IDENTIFIERS = "unverifiedIdentifiers";
  @SerializedName(SERIALIZED_NAME_UNVERIFIED_IDENTIFIERS)
  private List<Identifier> unverifiedIdentifiers;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private PatientGender gender;

  public static final String SERIALIZED_NAME_YEAR_OF_BIRTH = "yearOfBirth";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_BIRTH)
  private Integer yearOfBirth;

  public PatientDiscoveryRequestPatient() {
  }

  public PatientDiscoveryRequestPatient id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifier of patient at consent manager
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PatientDiscoveryRequestPatient verifiedIdentifiers(List<Identifier> verifiedIdentifiers) {
    
    this.verifiedIdentifiers = verifiedIdentifiers;
    return this;
  }

  public PatientDiscoveryRequestPatient addVerifiedIdentifiersItem(Identifier verifiedIdentifiersItem) {
    if (this.verifiedIdentifiers == null) {
      this.verifiedIdentifiers = new ArrayList<>();
    }
    this.verifiedIdentifiers.add(verifiedIdentifiersItem);
    return this;
  }

   /**
   * Get verifiedIdentifiers
   * @return verifiedIdentifiers
  **/
  @javax.annotation.Nonnull
  public List<Identifier> getVerifiedIdentifiers() {
    return verifiedIdentifiers;
  }


  public void setVerifiedIdentifiers(List<Identifier> verifiedIdentifiers) {
    this.verifiedIdentifiers = verifiedIdentifiers;
  }


  public PatientDiscoveryRequestPatient unverifiedIdentifiers(List<Identifier> unverifiedIdentifiers) {
    
    this.unverifiedIdentifiers = unverifiedIdentifiers;
    return this;
  }

  public PatientDiscoveryRequestPatient addUnverifiedIdentifiersItem(Identifier unverifiedIdentifiersItem) {
    if (this.unverifiedIdentifiers == null) {
      this.unverifiedIdentifiers = new ArrayList<>();
    }
    this.unverifiedIdentifiers.add(unverifiedIdentifiersItem);
    return this;
  }

   /**
   * Get unverifiedIdentifiers
   * @return unverifiedIdentifiers
  **/
  @javax.annotation.Nullable
  public List<Identifier> getUnverifiedIdentifiers() {
    return unverifiedIdentifiers;
  }


  public void setUnverifiedIdentifiers(List<Identifier> unverifiedIdentifiers) {
    this.unverifiedIdentifiers = unverifiedIdentifiers;
  }


  public PatientDiscoveryRequestPatient name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PatientDiscoveryRequestPatient gender(PatientGender gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nonnull
  public PatientGender getGender() {
    return gender;
  }


  public void setGender(PatientGender gender) {
    this.gender = gender;
  }


  public PatientDiscoveryRequestPatient yearOfBirth(Integer yearOfBirth) {
    
    this.yearOfBirth = yearOfBirth;
    return this;
  }

   /**
   * Get yearOfBirth
   * @return yearOfBirth
  **/
  @javax.annotation.Nonnull
  public Integer getYearOfBirth() {
    return yearOfBirth;
  }


  public void setYearOfBirth(Integer yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientDiscoveryRequestPatient patientDiscoveryRequestPatient = (PatientDiscoveryRequestPatient) o;
    return Objects.equals(this.id, patientDiscoveryRequestPatient.id) &&
        Objects.equals(this.verifiedIdentifiers, patientDiscoveryRequestPatient.verifiedIdentifiers) &&
        Objects.equals(this.unverifiedIdentifiers, patientDiscoveryRequestPatient.unverifiedIdentifiers) &&
        Objects.equals(this.name, patientDiscoveryRequestPatient.name) &&
        Objects.equals(this.gender, patientDiscoveryRequestPatient.gender) &&
        Objects.equals(this.yearOfBirth, patientDiscoveryRequestPatient.yearOfBirth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, verifiedIdentifiers, unverifiedIdentifiers, name, gender, yearOfBirth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientDiscoveryRequestPatient {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    verifiedIdentifiers: ").append(toIndentedString(verifiedIdentifiers)).append("\n");
    sb.append("    unverifiedIdentifiers: ").append(toIndentedString(unverifiedIdentifiers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    yearOfBirth: ").append(toIndentedString(yearOfBirth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("verifiedIdentifiers");
    openapiFields.add("unverifiedIdentifiers");
    openapiFields.add("name");
    openapiFields.add("gender");
    openapiFields.add("yearOfBirth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("verifiedIdentifiers");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("gender");
    openapiRequiredFields.add("yearOfBirth");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatientDiscoveryRequestPatient
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PatientDiscoveryRequestPatient.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientDiscoveryRequestPatient is not found in the empty JSON string", PatientDiscoveryRequestPatient.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatientDiscoveryRequestPatient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientDiscoveryRequestPatient` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatientDiscoveryRequestPatient.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("verifiedIdentifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifiedIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("verifiedIdentifiers").toString()));
      }

      JsonArray jsonArrayverifiedIdentifiers = jsonObj.getAsJsonArray("verifiedIdentifiers");
      // validate the required field `verifiedIdentifiers` (array)
      for (int i = 0; i < jsonArrayverifiedIdentifiers.size(); i++) {
        Identifier.validateJsonObject(jsonArrayverifiedIdentifiers.get(i).getAsJsonObject());
      };
      if (jsonObj.get("unverifiedIdentifiers") != null && !jsonObj.get("unverifiedIdentifiers").isJsonNull()) {
        JsonArray jsonArrayunverifiedIdentifiers = jsonObj.getAsJsonArray("unverifiedIdentifiers");
        if (jsonArrayunverifiedIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unverifiedIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unverifiedIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("unverifiedIdentifiers").toString()));
          }

          // validate the optional field `unverifiedIdentifiers` (array)
          for (int i = 0; i < jsonArrayunverifiedIdentifiers.size(); i++) {
            Identifier.validateJsonObject(jsonArrayunverifiedIdentifiers.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientDiscoveryRequestPatient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientDiscoveryRequestPatient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientDiscoveryRequestPatient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientDiscoveryRequestPatient.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientDiscoveryRequestPatient>() {
           @Override
           public void write(JsonWriter out, PatientDiscoveryRequestPatient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientDiscoveryRequestPatient read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatientDiscoveryRequestPatient given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatientDiscoveryRequestPatient
  * @throws IOException if the JSON string is invalid with respect to PatientDiscoveryRequestPatient
  */
  public static PatientDiscoveryRequestPatient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientDiscoveryRequestPatient.class);
  }

 /**
  * Convert an instance of PatientDiscoveryRequestPatient to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

