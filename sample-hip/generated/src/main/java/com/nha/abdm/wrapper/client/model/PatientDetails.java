/*
 * Swagger HIP Facade - OpenAPI 3.0
 * This is a set of interfaces based on the OpenAPI 3.0 specification for a wrapper client
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nha.abdm.wrapper.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nha.abdm.wrapper.client.model.PatientAddress;
import com.nha.abdm.wrapper.client.model.PatientVerifiedIdentifiers;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.nha.abdm.wrapper.client.invoker.JSON;

/**
 * PatientDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T00:27:32.411905600+05:30[Asia/Calcutta]")
public class PatientDetails {
  public static final String SERIALIZED_NAME_HEALTH_ID = "healthId";
  @SerializedName(SERIALIZED_NAME_HEALTH_ID)
  private String healthId;

  public static final String SERIALIZED_NAME_HEALTH_ID_NUMBER = "healthIdNumber";
  @SerializedName(SERIALIZED_NAME_HEALTH_ID_NUMBER)
  private String healthIdNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private PatientAddress address;

  public static final String SERIALIZED_NAME_YEAR_OF_BIRTH = "yearOfBirth";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_BIRTH)
  private String yearOfBirth;

  public static final String SERIALIZED_NAME_DAY_OF_BIRTH = "dayOfBirth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_BIRTH)
  private String dayOfBirth;

  public static final String SERIALIZED_NAME_MONTH_OF_BIRTH = "monthOfBirth";
  @SerializedName(SERIALIZED_NAME_MONTH_OF_BIRTH)
  private String monthOfBirth;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<PatientVerifiedIdentifiers> identifiers;

  public PatientDetails() {
  }

  public PatientDetails healthId(String healthId) {
    
    this.healthId = healthId;
    return this;
  }

   /**
   * The health ID of the patient
   * @return healthId
  **/
  @javax.annotation.Nullable
  public String getHealthId() {
    return healthId;
  }


  public void setHealthId(String healthId) {
    this.healthId = healthId;
  }


  public PatientDetails healthIdNumber(String healthIdNumber) {
    
    this.healthIdNumber = healthIdNumber;
    return this;
  }

   /**
   * The health ID number of the patient
   * @return healthIdNumber
  **/
  @javax.annotation.Nullable
  public String getHealthIdNumber() {
    return healthIdNumber;
  }


  public void setHealthIdNumber(String healthIdNumber) {
    this.healthIdNumber = healthIdNumber;
  }


  public PatientDetails name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the patient
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PatientDetails gender(String gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * The gender of the patient
   * @return gender
  **/
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    this.gender = gender;
  }


  public PatientDetails address(PatientAddress address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public PatientAddress getAddress() {
    return address;
  }


  public void setAddress(PatientAddress address) {
    this.address = address;
  }


  public PatientDetails yearOfBirth(String yearOfBirth) {
    
    this.yearOfBirth = yearOfBirth;
    return this;
  }

   /**
   * The year of birth of the patient
   * @return yearOfBirth
  **/
  @javax.annotation.Nullable
  public String getYearOfBirth() {
    return yearOfBirth;
  }


  public void setYearOfBirth(String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
  }


  public PatientDetails dayOfBirth(String dayOfBirth) {
    
    this.dayOfBirth = dayOfBirth;
    return this;
  }

   /**
   * The day of birth of the patient
   * @return dayOfBirth
  **/
  @javax.annotation.Nullable
  public String getDayOfBirth() {
    return dayOfBirth;
  }


  public void setDayOfBirth(String dayOfBirth) {
    this.dayOfBirth = dayOfBirth;
  }


  public PatientDetails monthOfBirth(String monthOfBirth) {
    
    this.monthOfBirth = monthOfBirth;
    return this;
  }

   /**
   * The month of birth of the patient
   * @return monthOfBirth
  **/
  @javax.annotation.Nullable
  public String getMonthOfBirth() {
    return monthOfBirth;
  }


  public void setMonthOfBirth(String monthOfBirth) {
    this.monthOfBirth = monthOfBirth;
  }


  public PatientDetails identifiers(List<PatientVerifiedIdentifiers> identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  public PatientDetails addIdentifiersItem(PatientVerifiedIdentifiers identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

   /**
   * Get identifiers
   * @return identifiers
  **/
  @javax.annotation.Nullable
  public List<PatientVerifiedIdentifiers> getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(List<PatientVerifiedIdentifiers> identifiers) {
    this.identifiers = identifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientDetails patientDetails = (PatientDetails) o;
    return Objects.equals(this.healthId, patientDetails.healthId) &&
        Objects.equals(this.healthIdNumber, patientDetails.healthIdNumber) &&
        Objects.equals(this.name, patientDetails.name) &&
        Objects.equals(this.gender, patientDetails.gender) &&
        Objects.equals(this.address, patientDetails.address) &&
        Objects.equals(this.yearOfBirth, patientDetails.yearOfBirth) &&
        Objects.equals(this.dayOfBirth, patientDetails.dayOfBirth) &&
        Objects.equals(this.monthOfBirth, patientDetails.monthOfBirth) &&
        Objects.equals(this.identifiers, patientDetails.identifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthId, healthIdNumber, name, gender, address, yearOfBirth, dayOfBirth, monthOfBirth, identifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientDetails {\n");
    sb.append("    healthId: ").append(toIndentedString(healthId)).append("\n");
    sb.append("    healthIdNumber: ").append(toIndentedString(healthIdNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    yearOfBirth: ").append(toIndentedString(yearOfBirth)).append("\n");
    sb.append("    dayOfBirth: ").append(toIndentedString(dayOfBirth)).append("\n");
    sb.append("    monthOfBirth: ").append(toIndentedString(monthOfBirth)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("healthId");
    openapiFields.add("healthIdNumber");
    openapiFields.add("name");
    openapiFields.add("gender");
    openapiFields.add("address");
    openapiFields.add("yearOfBirth");
    openapiFields.add("dayOfBirth");
    openapiFields.add("monthOfBirth");
    openapiFields.add("identifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatientDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PatientDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientDetails is not found in the empty JSON string", PatientDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatientDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientDetails` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("healthId") != null && !jsonObj.get("healthId").isJsonNull()) && !jsonObj.get("healthId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthId").toString()));
      }
      if ((jsonObj.get("healthIdNumber") != null && !jsonObj.get("healthIdNumber").isJsonNull()) && !jsonObj.get("healthIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthIdNumber").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        PatientAddress.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("yearOfBirth") != null && !jsonObj.get("yearOfBirth").isJsonNull()) && !jsonObj.get("yearOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yearOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yearOfBirth").toString()));
      }
      if ((jsonObj.get("dayOfBirth") != null && !jsonObj.get("dayOfBirth").isJsonNull()) && !jsonObj.get("dayOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayOfBirth").toString()));
      }
      if ((jsonObj.get("monthOfBirth") != null && !jsonObj.get("monthOfBirth").isJsonNull()) && !jsonObj.get("monthOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthOfBirth").toString()));
      }
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
        if (jsonArrayidentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
          }

          // validate the optional field `identifiers` (array)
          for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
            PatientVerifiedIdentifiers.validateJsonObject(jsonArrayidentifiers.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientDetails>() {
           @Override
           public void write(JsonWriter out, PatientDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatientDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatientDetails
  * @throws IOException if the JSON string is invalid with respect to PatientDetails
  */
  public static PatientDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientDetails.class);
  }

 /**
  * Convert an instance of PatientDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

