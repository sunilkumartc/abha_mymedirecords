/*
 * Swagger HIU Facade - OpenAPI 3.0
 * This is a set of interfaces based on the OpenAPI 3.0 specification for a wrapper client
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nha.abdm.wrapper.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.nha.abdm.wrapper.client.invoker.JSON;

/**
 * ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-21T21:07:52.071456600+05:30[Asia/Calcutta]")
public class ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_HIP_ID = "hipId";
  @SerializedName(SERIALIZED_NAME_HIP_ID)
  private String hipId;

  public static final String SERIALIZED_NAME_CARE_CONTEXT_REFERENCE = "careContextReference";
  @SerializedName(SERIALIZED_NAME_CARE_CONTEXT_REFERENCE)
  private List<String> careContextReference;

  public ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner() {
  }

  public ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner lastUpdated(String lastUpdated) {
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner hipId(String hipId) {
    
    this.hipId = hipId;
    return this;
  }

   /**
   * Get hipId
   * @return hipId
  **/
  @javax.annotation.Nullable
  public String getHipId() {
    return hipId;
  }


  public void setHipId(String hipId) {
    this.hipId = hipId;
  }


  public ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner careContextReference(List<String> careContextReference) {
    
    this.careContextReference = careContextReference;
    return this;
  }

  public ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner addCareContextReferenceItem(String careContextReferenceItem) {
    if (this.careContextReference == null) {
      this.careContextReference = new ArrayList<>();
    }
    this.careContextReference.add(careContextReferenceItem);
    return this;
  }

   /**
   * Get careContextReference
   * @return careContextReference
  **/
  @javax.annotation.Nullable
  public List<String> getCareContextReference() {
    return careContextReference;
  }


  public void setCareContextReference(List<String> careContextReference) {
    this.careContextReference = careContextReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner consentStatusConsentDetailsConsentInnerConsentArtefactsInner = (ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner) o;
    return Objects.equals(this.id, consentStatusConsentDetailsConsentInnerConsentArtefactsInner.id) &&
        Objects.equals(this.lastUpdated, consentStatusConsentDetailsConsentInnerConsentArtefactsInner.lastUpdated) &&
        Objects.equals(this.hipId, consentStatusConsentDetailsConsentInnerConsentArtefactsInner.hipId) &&
        Objects.equals(this.careContextReference, consentStatusConsentDetailsConsentInnerConsentArtefactsInner.careContextReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lastUpdated, hipId, careContextReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    hipId: ").append(toIndentedString(hipId)).append("\n");
    sb.append("    careContextReference: ").append(toIndentedString(careContextReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("lastUpdated");
    openapiFields.add("hipId");
    openapiFields.add("careContextReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner is not found in the empty JSON string", ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) && !jsonObj.get("lastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdated").toString()));
      }
      if ((jsonObj.get("hipId") != null && !jsonObj.get("hipId").isJsonNull()) && !jsonObj.get("hipId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hipId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hipId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("careContextReference") != null && !jsonObj.get("careContextReference").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `careContextReference` to be an array in the JSON string but got `%s`", jsonObj.get("careContextReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner>() {
           @Override
           public void write(JsonWriter out, ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner
  * @throws IOException if the JSON string is invalid with respect to ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner
  */
  public static ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner.class);
  }

 /**
  * Convert an instance of ConsentStatusConsentDetailsConsentInnerConsentArtefactsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

